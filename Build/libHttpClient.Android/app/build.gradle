apply plugin: "com.android.library"

android {
    compileSdkVersion 27
    defaultConfig.targetSdkVersion 21

    compileOptions {
        sourceCompatibility=JavaVersion.VERSION_1_7
        targetCompatibility=JavaVersion.VERSION_1_7
    }

    flavorDimensions "default"
    productFlavors {
        arm7 {
            minSdkVersion 19
            ndk.abiFilters "armeabi-v7a"
        }

        x86 {
            minSdkVersion 19
            ndk.abiFilters "x86"
        }

        arm64 {
            minSdkVersion 21
            ndk.abiFilters "arm64-v8a"
        }

        x86_64 {
            minSdkVersion 21
            ndk.abiFilters "x86_64"
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile("proguard-android.txt")

            externalNativeBuild {
                cmake {
                    arguments "-DCMAKE_BUILD_TYPE=Release"
                }
            }
        }
    }

    externalNativeBuild {
        cmake {
            path "../../../Utilities/CMake/Android/libHttpClient/CMakeLists.txt"
        }
    }

    packagingOptions {
        exclude "**/*.so" // To build static libs, we generate a dummy .so - but we don't actually want to package it.
    }

    libraryVariants.all { variant ->
        def variantFlavor = variant.getFlavorName()
        def variantAbi = "unknown"
        if (variantFlavor == "arm7") {
            variantAbi = "armeabi-v7a"
        } else if (variantFlavor == "arm64") {
            variantAbi = "arm64-v8a"
        } else if (variantFlavor == "x86") {
            variantAbi = "x86"
        } else if (variantFlavor == "x86_64") {
            variantAbi = "x86_64"
        }
        
        variant.outputs.each { output ->
            output.outputFileName = "../../../../../../Binaries/Android/${variantAbi}/${variant.getBuildType().getName()}/libHttpClient.aar"
        }
    }
}

dependencies {
    implementation "com.squareup.okhttp3:okhttp:3.10.0"
}
